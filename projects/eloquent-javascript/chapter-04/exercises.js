////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
//return an array that starts with start and ends with end including both numbers
// if(start === end){
//   arr.push(end)
//   return arr
// }
// if(start < end){
//   arr.push(start)
// }
// if(start >= end){
//   arr.push(start)
//   return range(start - 1, end, arr)
// }
// return range(start + 1, end, arr)
var array = [];
if (typeof step === 'undefined') {
  step = 1;
} else if (typeof step === 'undefined' && start > end) {
  step = -1;
}
console.log(step)
if (end > start && step > 0) {
  for (let i = start; i <= end; i += step) {
    array.push(i);
  }
} else if (start > end && step < 0) {
  for (let i = start; i >= end; i += step) {
    console.log(i)
    array.push(i);
  }
}
return array;

}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array, count = 0) {
  if(array.length === 0){
    return count
  }
  count += array[0]
  return sum(array.slice(1), count)
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  var revArray = [];
  for (let i = 0; i < array.length; i++) {
    revArray[i] = array[array.length - 1 - i];
  }
  return revArray;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  var arraytemp = [];
  for (let i = 0; i < array.length; i++) {
    arraytemp[i] = array[i];
  }
  for (let i = 0; i < array.length; i++) {
    array[i] = arraytemp[array.length - 1 - i];
  }
  return array
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  var rest = null;
  for (let i = array.length - 1; i >= 0; i--) {
    rest = { value: array[i], rest: rest };
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array = []) {
  if (list.rest === null) {
    array.push(list.value);
    return array;
  }
  array.push(list.value)
  return listToArray(list.rest, array);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return { value, rest: list };
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  if (!list) {
    return undefined;
  }
  if (n == 0) {
    return list.value;
  }
  return nth(list.rest, n - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  if (typeof x !== 'object' && typeof y !== 'object') {
    return x === y;
  }

  if (typeof x !== "object" || typeof y !== 'object') {
    return false;
  }

  let xKeys = Object.keys(x), yKeys = Object.keys(y);

  if (xKeys.length != yKeys.length) {
    return false;
  }

  for (let i = 0; i < xKeys.length; i++) {
    if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[yKeys[i]])) {
    return false;
    }
  }

  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
